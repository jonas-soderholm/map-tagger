{"ast":null,"code":"export async function RegisterNewAccount(email,password){try{const response=await fetch(\"http://localhost:5000/register\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({email,password})});if(!response.ok){throw new Error(\"Failed to register\");}const data=await response.json();//console.log(\"Registration successful:\", data);\n// Optionally, you can return data or perform other actions based on the response\nreturn data;}catch(error){//console.error(\"Error registering account:\", error.message);\n// Handle the error (e.g., display an error message to the user)\n}}export async function Login(email,password,setIsLoggedIn,setErrorMessage,rememberMe){try{const response=await fetch(\"http://localhost:5000/login\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({email,password})});if(!response.ok){throw new Error(\"Failed to login\");}const data=await response.json();//console.log(\"Login successful:\", data);\n// Set the isLoggedIn state to true\nsetIsLoggedIn(true);// Store the token securely\nif(rememberMe){localStorage.setItem(\"token\",data.token);}// Optionally, you can return data or perform other actions based on the response\nreturn data;}catch(error){setErrorMessage(\"Wrong email or password\");console.error(\"Error logging in:\",error.message);}}","map":{"version":3,"names":["RegisterNewAccount","email","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","error","Login","setIsLoggedIn","setErrorMessage","rememberMe","localStorage","setItem","token","console","message"],"sources":["/home/jonas/web-projects/trash-tagger/frontend/src/components/auth/LoginHandlerBackend.jsx"],"sourcesContent":["export async function RegisterNewAccount(email, password) {\n  try {\n    const response = await fetch(\"http://localhost:5000/register\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, password }),\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to register\");\n    }\n\n    const data = await response.json();\n    //console.log(\"Registration successful:\", data);\n\n    // Optionally, you can return data or perform other actions based on the response\n    return data;\n  } catch (error) {\n    //console.error(\"Error registering account:\", error.message);\n    // Handle the error (e.g., display an error message to the user)\n  }\n}\n\nexport async function Login(email, password, setIsLoggedIn, setErrorMessage, rememberMe) {\n  try {\n    const response = await fetch(\"http://localhost:5000/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, password }),\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to login\");\n    }\n\n    const data = await response.json();\n    //console.log(\"Login successful:\", data);\n\n    // Set the isLoggedIn state to true\n    setIsLoggedIn(true);\n\n    // Store the token securely\n    if (rememberMe) {\n      localStorage.setItem(\"token\", data.token);\n    }\n\n    // Optionally, you can return data or perform other actions based on the response\n    return data;\n  } catch (error) {\n    setErrorMessage(\"Wrong email or password\");\n    console.error(\"Error logging in:\", error.message);\n  }\n}\n"],"mappings":"AAAA,MAAO,eAAe,CAAAA,kBAAkBA,CAACC,KAAK,CAAEC,QAAQ,CAAE,CACxD,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,gCAAgC,CAAE,CAC7DC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAER,KAAK,CAAEC,QAAS,CAAC,CAC1C,CAAC,CAAC,CAEF,GAAI,CAACC,QAAQ,CAACO,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,oBAAoB,CAAC,CACvC,CAEA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAT,QAAQ,CAACU,IAAI,CAAC,CAAC,CAClC;AAEA;AACA,MAAO,CAAAD,IAAI,CACb,CAAE,MAAOE,KAAK,CAAE,CACd;AACA;AAAA,CAEJ,CAEA,MAAO,eAAe,CAAAC,KAAKA,CAACd,KAAK,CAAEC,QAAQ,CAAEc,aAAa,CAAEC,eAAe,CAAEC,UAAU,CAAE,CACvF,GAAI,CACF,KAAM,CAAAf,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,6BAA6B,CAAE,CAC1DC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAER,KAAK,CAAEC,QAAS,CAAC,CAC1C,CAAC,CAAC,CAEF,GAAI,CAACC,QAAQ,CAACO,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,iBAAiB,CAAC,CACpC,CAEA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAT,QAAQ,CAACU,IAAI,CAAC,CAAC,CAClC;AAEA;AACAG,aAAa,CAAC,IAAI,CAAC,CAEnB;AACA,GAAIE,UAAU,CAAE,CACdC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAER,IAAI,CAACS,KAAK,CAAC,CAC3C,CAEA;AACA,MAAO,CAAAT,IAAI,CACb,CAAE,MAAOE,KAAK,CAAE,CACdG,eAAe,CAAC,yBAAyB,CAAC,CAC1CK,OAAO,CAACR,KAAK,CAAC,mBAAmB,CAAEA,KAAK,CAACS,OAAO,CAAC,CACnD,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}