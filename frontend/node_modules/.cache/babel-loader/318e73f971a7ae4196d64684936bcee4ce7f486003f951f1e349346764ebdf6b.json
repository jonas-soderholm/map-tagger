{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useSharedState } from \"../../SharedContext.jsx\";\nfunction ScreenSettings() {\n  _s();\n  const {\n    mapArray\n  } = useSharedState([]);\n  const {\n    isMobile,\n    setIsMobile\n  } = useSharedState();\n\n  // Check if user wants to leave page or not\n  useEffect(() => {\n    if (mapArray.length === 0) {\n      return;\n    }\n    const handleBeforeUnload = e => {\n      // Cancel the event as stated by the standard.\n      e.preventDefault();\n      // Chrome requires returnValue to be set.\n      e.returnValue = \"Are you sure you want to leave? Changes you made may not be saved.\";\n      // Some browsers may display the message directly, while others display a fixed message.\n    };\n    window.addEventListener(\"beforeunload\", handleBeforeUnload);\n    return () => {\n      window.removeEventListener(\"beforeunload\", handleBeforeUnload);\n    };\n  }, [mapArray]);\n\n  // Resize if phone window update\n  useEffect(() => {\n    function handleResize() {\n      setIsMobile(window.innerWidth <= 768);\n    }\n    window.addEventListener(\"resize\", handleResize);\n    handleResize();\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  });\n\n  // Resize inner window for mobile\n  useEffect(() => {\n    const adjustHeight = () => {\n      // Only adjust height if on mobile\n      if (isMobile) {\n        const mainContainer = document.querySelector(\".main-container\");\n        if (mainContainer) {\n          mainContainer.style.height = `${window.innerHeight}px`;\n        }\n      }\n    };\n    adjustHeight();\n    window.addEventListener(\"resize\", adjustHeight);\n    return () => window.removeEventListener(\"resize\", adjustHeight);\n  });\n}\n_s(ScreenSettings, \"ZPVTEL4vqYqHeqmIZKXhmdiGZNo=\", false, function () {\n  return [useSharedState, useSharedState];\n});\n_c = ScreenSettings;\nexport default ScreenSettings;\nvar _c;\n$RefreshReg$(_c, \"ScreenSettings\");","map":{"version":3,"names":["useEffect","useSharedState","ScreenSettings","_s","mapArray","isMobile","setIsMobile","length","handleBeforeUnload","e","preventDefault","returnValue","window","addEventListener","removeEventListener","handleResize","innerWidth","adjustHeight","mainContainer","document","querySelector","style","height","innerHeight","_c","$RefreshReg$"],"sources":["/home/jonas/web-projects/trash-tagger/frontend/src/components/settings/ScreenSettings.jsx"],"sourcesContent":["import { useEffect } from \"react\";\nimport { useSharedState } from \"../../SharedContext.jsx\";\n\nfunction ScreenSettings() {\n  const { mapArray } = useSharedState([]);\n  const { isMobile, setIsMobile } = useSharedState();\n\n  // Check if user wants to leave page or not\n  useEffect(() => {\n    if (mapArray.length === 0) {\n      return;\n    }\n\n    const handleBeforeUnload = (e) => {\n      // Cancel the event as stated by the standard.\n      e.preventDefault();\n      // Chrome requires returnValue to be set.\n      e.returnValue = \"Are you sure you want to leave? Changes you made may not be saved.\";\n      // Some browsers may display the message directly, while others display a fixed message.\n    };\n\n    window.addEventListener(\"beforeunload\", handleBeforeUnload);\n\n    return () => {\n      window.removeEventListener(\"beforeunload\", handleBeforeUnload);\n    };\n  }, [mapArray]);\n\n  // Resize if phone window update\n  useEffect(() => {\n    function handleResize() {\n      setIsMobile(window.innerWidth <= 768);\n    }\n    window.addEventListener(\"resize\", handleResize);\n    handleResize();\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  });\n\n  // Resize inner window for mobile\n  useEffect(() => {\n    const adjustHeight = () => {\n      // Only adjust height if on mobile\n      if (isMobile) {\n        const mainContainer = document.querySelector(\".main-container\");\n        if (mainContainer) {\n          mainContainer.style.height = `${window.innerHeight}px`;\n        }\n      }\n    };\n\n    adjustHeight();\n    window.addEventListener(\"resize\", adjustHeight);\n    return () => window.removeEventListener(\"resize\", adjustHeight);\n  });\n}\n\nexport default ScreenSettings;\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,cAAc,QAAQ,yBAAyB;AAExD,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAM;IAAEC;EAAS,CAAC,GAAGH,cAAc,CAAC,EAAE,CAAC;EACvC,MAAM;IAAEI,QAAQ;IAAEC;EAAY,CAAC,GAAGL,cAAc,CAAC,CAAC;;EAElD;EACAD,SAAS,CAAC,MAAM;IACd,IAAII,QAAQ,CAACG,MAAM,KAAK,CAAC,EAAE;MACzB;IACF;IAEA,MAAMC,kBAAkB,GAAIC,CAAC,IAAK;MAChC;MACAA,CAAC,CAACC,cAAc,CAAC,CAAC;MAClB;MACAD,CAAC,CAACE,WAAW,GAAG,oEAAoE;MACpF;IACF,CAAC;IAEDC,MAAM,CAACC,gBAAgB,CAAC,cAAc,EAAEL,kBAAkB,CAAC;IAE3D,OAAO,MAAM;MACXI,MAAM,CAACE,mBAAmB,CAAC,cAAc,EAAEN,kBAAkB,CAAC;IAChE,CAAC;EACH,CAAC,EAAE,CAACJ,QAAQ,CAAC,CAAC;;EAEd;EACAJ,SAAS,CAAC,MAAM;IACd,SAASe,YAAYA,CAAA,EAAG;MACtBT,WAAW,CAACM,MAAM,CAACI,UAAU,IAAI,GAAG,CAAC;IACvC;IACAJ,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEE,YAAY,CAAC;IAC/CA,YAAY,CAAC,CAAC;IACd,OAAO,MAAM;MACXH,MAAM,CAACE,mBAAmB,CAAC,QAAQ,EAAEC,YAAY,CAAC;IACpD,CAAC;EACH,CAAC,CAAC;;EAEF;EACAf,SAAS,CAAC,MAAM;IACd,MAAMiB,YAAY,GAAGA,CAAA,KAAM;MACzB;MACA,IAAIZ,QAAQ,EAAE;QACZ,MAAMa,aAAa,GAAGC,QAAQ,CAACC,aAAa,CAAC,iBAAiB,CAAC;QAC/D,IAAIF,aAAa,EAAE;UACjBA,aAAa,CAACG,KAAK,CAACC,MAAM,GAAI,GAAEV,MAAM,CAACW,WAAY,IAAG;QACxD;MACF;IACF,CAAC;IAEDN,YAAY,CAAC,CAAC;IACdL,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEI,YAAY,CAAC;IAC/C,OAAO,MAAML,MAAM,CAACE,mBAAmB,CAAC,QAAQ,EAAEG,YAAY,CAAC;EACjE,CAAC,CAAC;AACJ;AAACd,EAAA,CArDQD,cAAc;EAAA,QACAD,cAAc,EACDA,cAAc;AAAA;AAAAuB,EAAA,GAFzCtB,cAAc;AAuDvB,eAAeA,cAAc;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}