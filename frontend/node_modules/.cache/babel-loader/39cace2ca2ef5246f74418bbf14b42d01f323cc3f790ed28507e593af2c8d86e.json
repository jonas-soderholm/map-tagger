{"ast":null,"code":"export async function RegisterNewAccount(email, password) {\n  console.log(\"email: \", email);\n  console.log(\"Pass: \", password);\n  try {\n    const response = await fetch(\"http://localhost:3000/register\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to register\");\n    }\n    const data = await response.json();\n    console.log(\"Registration successful:\", data);\n\n    // Optionally, you can return data or perform other actions based on the response\n    return data;\n  } catch (error) {\n    console.error(\"Error registering account:\", error.message);\n    // Handle the error (e.g., display an error message to the user)\n  }\n}\n_c = RegisterNewAccount;\nexport async function Login(email, password, setIsLoggedIn, setErrorMessage, rememberMe) {\n  try {\n    const response = await fetch(\"http://localhost:3000/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to login\");\n    }\n    const data = await response.json();\n    console.log(\"Login successful:\", data);\n\n    // Set the isLoggedIn state to true\n    setIsLoggedIn(true);\n\n    // Store the token securely\n    if (rememberMe) {\n      localStorage.setItem(\"token\", data.token);\n    }\n\n    // Optionally, you can return data or perform other actions based on the response\n    return data;\n  } catch (error) {\n    setErrorMessage(\"Wrong email or password\");\n    console.error(\"Error logging in:\", error.message);\n  }\n}\n_c2 = Login;\nvar _c, _c2;\n$RefreshReg$(_c, \"RegisterNewAccount\");\n$RefreshReg$(_c2, \"Login\");","map":{"version":3,"names":["RegisterNewAccount","email","password","console","log","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","error","message","_c","Login","setIsLoggedIn","setErrorMessage","rememberMe","localStorage","setItem","token","_c2","$RefreshReg$"],"sources":["/home/jonas/web-projects/trash-tagger/frontend/src/components/auth/LoginHandlerBackend.jsx"],"sourcesContent":["export async function RegisterNewAccount(email, password) {\n  console.log(\"email: \", email);\n  console.log(\"Pass: \", password);\n\n  try {\n    const response = await fetch(\"http://localhost:3000/register\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, password }),\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to register\");\n    }\n\n    const data = await response.json();\n    console.log(\"Registration successful:\", data);\n\n    // Optionally, you can return data or perform other actions based on the response\n    return data;\n  } catch (error) {\n    console.error(\"Error registering account:\", error.message);\n    // Handle the error (e.g., display an error message to the user)\n  }\n}\n\nexport async function Login(email, password, setIsLoggedIn, setErrorMessage, rememberMe) {\n  try {\n    const response = await fetch(\"http://localhost:3000/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, password }),\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to login\");\n    }\n\n    const data = await response.json();\n    console.log(\"Login successful:\", data);\n\n    // Set the isLoggedIn state to true\n    setIsLoggedIn(true);\n\n    // Store the token securely\n    if (rememberMe) {\n      localStorage.setItem(\"token\", data.token);\n    }\n\n    // Optionally, you can return data or perform other actions based on the response\n    return data;\n  } catch (error) {\n    setErrorMessage(\"Wrong email or password\");\n    console.error(\"Error logging in:\", error.message);\n  }\n}\n"],"mappings":"AAAA,OAAO,eAAeA,kBAAkBA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EACxDC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEH,KAAK,CAAC;EAC7BE,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,QAAQ,CAAC;EAE/B,IAAI;IACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,EAAE;MAC7DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEV,KAAK;QAAEC;MAAS,CAAC;IAC1C,CAAC,CAAC;IAEF,IAAI,CAACG,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;IACvC;IAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClCZ,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEU,IAAI,CAAC;;IAE7C;IACA,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdb,OAAO,CAACa,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAACC,OAAO,CAAC;IAC1D;EACF;AACF;AAACC,EAAA,GA1BqBlB,kBAAkB;AA4BxC,OAAO,eAAemB,KAAKA,CAAClB,KAAK,EAAEC,QAAQ,EAAEkB,aAAa,EAAEC,eAAe,EAAEC,UAAU,EAAE;EACvF,IAAI;IACF,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;MAC1DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEV,KAAK;QAAEC;MAAS,CAAC;IAC1C,CAAC,CAAC;IAEF,IAAI,CAACG,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;IACpC;IAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClCZ,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEU,IAAI,CAAC;;IAEtC;IACAM,aAAa,CAAC,IAAI,CAAC;;IAEnB;IACA,IAAIE,UAAU,EAAE;MACdC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEV,IAAI,CAACW,KAAK,CAAC;IAC3C;;IAEA;IACA,OAAOX,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdK,eAAe,CAAC,yBAAyB,CAAC;IAC1ClB,OAAO,CAACa,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAACC,OAAO,CAAC;EACnD;AACF;AAACS,GAAA,GA/BqBP,KAAK;AAAA,IAAAD,EAAA,EAAAQ,GAAA;AAAAC,YAAA,CAAAT,EAAA;AAAAS,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}